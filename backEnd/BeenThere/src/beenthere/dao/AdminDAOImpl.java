package beenthere.dao;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import beenthere.entity.AdminEntity;
import beenthere.entity.CityEntity;
import beenthere.entity.ImageEntity;
import beenthere.entity.PlaceEntity;
import beenthere.entity.QueriesEntity;
import beenthere.entity.SiteFeedbackEntity;
import beenthere.entity.UserEntity;
import beenthere.entity.UserReviewEntity;
import beenthere.model.Admin;
import beenthere.model.AdminDashBoardData;
import beenthere.model.City;
import beenthere.model.Image;
import beenthere.model.LoginCredentials;
import beenthere.model.Place;
import beenthere.model.SiteFeedback;
import beenthere.model.User;

@Repository("adminDao")
public class AdminDAOImpl implements AdminDAO 
{
	/*
	 * 0. annotaions and sessionFactory
	 * -> @Repository("adminDao")
	 * 
	 * -> @Autowired
	 *    SessionFactory sessionFactory;
	 * 
	 * methods:
	 * 	1. get current session
	 * 	Session session = sessionFactory.getCurrentSession();
	 *  
	 *  2. create the entity for operations
	 *  
	 *  3. perform the required operations to get required obj( in EntityType)
	 *  
	 *  4. check for null and convert to modelObj
	 *  
	 *  5. return the modelObj
	 */
	
	@Autowired
	SessionFactory sessionFactory;

	@Override
	public Admin loginAdmin(LoginCredentials credentials) 
	{
		Session session = sessionFactory.getCurrentSession();
		AdminEntity adminEntity = session.get(AdminEntity.class, credentials.getLoginId());
		
		if(adminEntity !=null) 
		{
			if(credentials.getPassword().equals(adminEntity.getPassword()))
			{
				Admin admin = new Admin(adminEntity);
				return admin;
			}
			else
			{
				adminEntity.setWrongAttempts(adminEntity.getWrongAttempts()+1);
				Admin admin = new Admin(adminEntity);
				return admin;
			}
		}
		return null;
	}
	
	@Override
	public AdminDashBoardData adminDashboardData() 
	{
		AdminDashBoardData data = new AdminDashBoardData();
		data.setHelpdeskStatus(calculateHelpdeskStatus());
		data.setSatisfactionLevel(calculateSatisfactionLevel());
		data.setTrendingPlace(getTrendingPlaces());
		data.setTopSearchedPlaces(getMostSearchedPlaces());
		data.setTopContactedUsers(getMostContactedUsers(4));
		
		return data;
	}
	
	@Override
	public Place addPlace(Place place)
	{
		Session session = sessionFactory.getCurrentSession();
		
		if(place != null)
		{
			CityEntity cityEntity = session.get(CityEntity.class, place.getCityId());
			PlaceEntity placeEntity = new PlaceEntity(place);
			
			session.save(placeEntity);
			
			cityEntity.getPlaceEntities().add(placeEntity);
			session.save(cityEntity);

			//pk is autogenerated after persist/save
			place.setPlaceId(placeEntity.getPlaceId());
		}
		
		return place;
	}
	
	@Override
	public City addCity(City city)
	{
		Session session = sessionFactory.getCurrentSession();
		
		if(city != null)
		{
			CityEntity cityEntity = new CityEntity(city);
//			System.out.println("get worked, new entity created - " + reviewEntity.getReviewId());
			
			session.save(cityEntity);
			
			//pk is autogenerated after persist/save
			city.setCityId(cityEntity.getCityId());
		}
		
		return city;
	}
	
	@Override
	public Image insertImageForCity(Image img)
	{
		Session session = sessionFactory.getCurrentSession();
		
		//System.out.println("received: " + img.getPic());
		ImageEntity imgEntity = new ImageEntity(img);
		
		//System.out.println(img.getReviewId());
		CityEntity cityEntity = session.get(CityEntity.class, img.getCityId());
        //System.out.println(session.save(imgEntity));
		
		img.setImageId((Integer) session.save(imgEntity));
		cityEntity.getCityImageEntities().add(imgEntity);
        System.out.println(session.save(cityEntity));
        
		return img;
	}
	
	@Override
	public Image insertImageForPlace(Image img)
	{
		Session session = sessionFactory.getCurrentSession();
		
		//System.out.println("received: " + img.getPic());
		ImageEntity imgEntity = new ImageEntity(img);
		
		//System.out.println(img.getReviewId());
		PlaceEntity placeEntity = session.get(PlaceEntity.class, img.getPlaceId());
        //System.out.println(session.save(imgEntity));
		
		img.setImageId((Integer) session.save(imgEntity));
		placeEntity.getPlaceImageEntities().add(imgEntity);
        System.out.println(session.save(placeEntity));
        
		return img;
	}
	
	@Override
	public City updateCity(City city)
	{
		Session session = sessionFactory.getCurrentSession();
		
		if(city != null)
		{
			CityEntity cityEntity = session.get(CityEntity.class, city.getCityId());
			
			cityEntity.setName(city.getName());
			cityEntity.setDescription(city.getDescription());
			
			session.save(cityEntity);
		}
		
		return city;
	}
	
	@Override
	public Place updatePlace(Place place)
	{
		Session session = sessionFactory.getCurrentSession();
		
		if(place != null)
		{
			PlaceEntity placeEntity = session.get(PlaceEntity.class, place.getPlaceId());
			
			placeEntity.setName(place.getName());
			placeEntity.setDescription(place.getDescription());
			
			session.save(placeEntity);
		}
		
		return place;
	}
	
	@Override
	public String deleteCity(Integer cityId)
	{
		Session session = sessionFactory.getCurrentSession();
		
		if(cityId != null)
		{
			CityEntity cityEntity = session.get(CityEntity.class,cityId);
			
			for(PlaceEntity pe : cityEntity.getPlaceEntities()){
				pe.setCityId(null);
				session.save(pe);
			}
			
			cityEntity.setPlaceEntities(null);
			cityEntity.setCityImageEntities(null);
			
			session.delete(cityEntity);
			return "Success";
		}
		
		return "No record found";
	}
	
	@Override
	public String deletePlace(Integer placeId)
	{
		Session session = sessionFactory.getCurrentSession();
		 
		if(placeId != null)
		{
			PlaceEntity placeEntity = session.get(PlaceEntity.class, placeId);
			CityEntity cityEntity = session.get(CityEntity.class, placeEntity.getCityId());
			
			cityEntity.getPlaceEntities().remove(placeEntity);
			
			for(UserReviewEntity ure : placeEntity.getReviewEntities()){
				ure.setPlaceId(null);
				session.save(ure);
			}
			
			placeEntity.setReviewEntities(null);
			placeEntity.setPlaceImageEntities(null);
			
			session.delete(placeEntity);
			return "success";
		}
		
		return "no record found";
	}

	@Override
	public AdminDashBoardData getViewUsersComponentData() 
	{
		AdminDashBoardData data = new AdminDashBoardData();
//		data.setHelpdeskStatus(calculateHelpdeskStatus());
//		data.setSatisfactionLevel(calculateSatisfactionLevel());
		data.setTopContactedUsers(getMostContactedUsers(3));
		data.setUserNamesForSearch(getUserNames());
		data.setTopTravellingUsers(getMostTravellingUsers(3));
		
		return data;
	}
	
	@Override
	public User getUserByEmail(String userEmail) 
	{
		Session session = sessionFactory.getCurrentSession();

//		System.out.println(userEmail);
		
		UserEntity entity = session.get(UserEntity.class, userEmail);
		User user = null;
		
		if(entity != null){
			user = new User(entity);
			user.setNumberOfConnections(getConnectionsOfUser(userEmail));
			user.setNumberOfPlacesVisited(getPlacesTravelledByUser(userEmail));
		}
		
		
		
		return user;
	}
	
	@Override
	public List<User> getUsersListByName(String userName) 
	{
		Session session = sessionFactory.getCurrentSession();
		List<User> userList = new ArrayList<>();
		
		Query qry = session.createQuery("select userEntity from UserEntity userEntity");
		
		@SuppressWarnings("unchecked")
		List<UserEntity> allUserEntities = qry.list();
		
		for(UserEntity entity: allUserEntities){
			if(entity.getName().toLowerCase().contains(userName.toLowerCase())){
				userList.add(new User(entity));
			}
		}
		
		return userList;
	}

	@Override
	public List<SiteFeedback> getAllFeedbacks()
	{
		Session session = sessionFactory.getCurrentSession();
		
		List<SiteFeedback> allFeedbacks = new ArrayList<>();
		
		Query qry = session.createQuery("select feedback from SiteFeedbackEntity feedback");
		
		@SuppressWarnings("unchecked")
		List<SiteFeedbackEntity> allFeedbackEntities = qry.list();
		
		for(SiteFeedbackEntity currFeedbackEntity : allFeedbackEntities)
		{
			SiteFeedback currFeedback = new SiteFeedback(currFeedbackEntity);
			UserEntity userForName = session.get(UserEntity.class, currFeedbackEntity.getUserId());
			currFeedback.setUserName(userForName.getName());
			allFeedbacks.add(currFeedback);
		}
		return allFeedbacks;
	}
	
	@Override
	public List<beenthere.model.HelpdeskQuery> getAllUserQueries()
	{
		Session session = sessionFactory.getCurrentSession();
		
		List<beenthere.model.HelpdeskQuery> allQueries = new ArrayList<>();
		
		Query qry = session.createQuery("select query from QueriesEntity query");
		
		@SuppressWarnings("unchecked")
		List<QueriesEntity> allQueryEntities = qry.list();
		
		for(QueriesEntity currQueryEntity : allQueryEntities)
		{
			beenthere.model.HelpdeskQuery currQuery = new beenthere.model.HelpdeskQuery(currQueryEntity);
			allQueries.add(currQuery);
		}
		return allQueries;
	}
	
	private Integer calculateHelpdeskStatus(){
		Session session = sessionFactory.getCurrentSession();
		
		Query qry = session.createQuery("select queryEntity from QueriesEntity queryEntity");
		@SuppressWarnings("unchecked")
		List<QueriesEntity> allQueriesEntities = qry.list();
 		int totalQueries=allQueriesEntities.size();
 		
 		int noOfCompleted = 0;
 		for(QueriesEntity currQuery : allQueriesEntities){
 			if(currQuery.getQueryStatus().equals("Completed")){
 				noOfCompleted += 1;
 			}
 		}
 		
 		int percentage=(noOfCompleted*100)/totalQueries;
		
		return percentage;		
	}
	
	private Integer calculateSatisfactionLevel(){
		Session session = sessionFactory.getCurrentSession();
		
		Query qry = session.createQuery("select feedbackEntity from SiteFeedbackEntity feedbackEntity");
		@SuppressWarnings("unchecked")
		List<SiteFeedbackEntity> allFeedbackEntities = qry.list();
 		int total = allFeedbackEntities.size();
 		
 		int sum = 0;
 		for(SiteFeedbackEntity currFeedbackEntity : allFeedbackEntities){
 			sum += currFeedbackEntity.getSatisfactionLevel();
 		}
 		
 		int percentage=(sum*20)/total;
		//System.out.println("sum-"+sum+" n-"+total+" %-"+percentage);
 		
		return percentage;		
	}
	
	public List<Place> getTrendingPlaces(){
		Session session = sessionFactory.getCurrentSession();
 		
		String sqlPlaceId="SELECT placeId FROM UserReviewEntity GROUP BY placeId ORDER BY count(reviewId) desc";
		String sqlCount="SELECT count(reviewId) FROM UserReviewEntity GROUP BY placeId ORDER BY count(reviewId) desc";
		Query queryPlaceId = session.createQuery(sqlPlaceId);
		Query queryCount = session.createQuery(sqlCount);
		List resultPlaceIds = queryPlaceId.list();
		List resultPCount = queryCount.list();
		
		List<Place> result = new ArrayList<>();

		for(int i = 0; i < 4; i++){
			PlaceEntity currPlaceEntity = session.get(PlaceEntity.class, (Integer) resultPlaceIds.get(i));
			Place currPlace = new Place(currPlaceEntity, (Long) resultPCount.get(i));
			result.add(currPlace);
		}
		
		return result;		
	}
	
	public List<Place> getMostSearchedPlaces(){
		Session session = sessionFactory.getCurrentSession();
 		
		String sql="FROM PlaceEntity ORDER BY pageViewCount desc";
		Query query = session.createQuery(sql);
		List<PlaceEntity> resultAll = query.list();
		
		List<Place> result = new ArrayList<>();

		for(int i = 0; i < 4; i++){
			System.out.println(resultAll.get(i));
			
			Place currPlace = new Place(resultAll.get(i));
			currPlace.setReviews(null);
			result.add(currPlace);
		}
		
		return result;		
	}
	
	private List<User> getMostContactedUsers(Integer noOfUsersNeeded){
		Session session = sessionFactory.getCurrentSession();
		
		String sqlToUserId = "SELECT toUserId FROM UserConnectionsEntity GROUP BY toUserId ORDER BY count(userConnectionId) desc";
		String sqlCountConnections = "SELECT count(userConnectionId) FROM UserConnectionsEntity GROUP BY toUserId ORDER BY count(userConnectionId) desc";
		Query queryToUserId = session.createQuery(sqlToUserId);
		Query queryCountConnections = session.createQuery(sqlCountConnections);
		List<String> resultToUserIdsList = queryToUserId.list();
		List resultCountConnections = queryCountConnections.list();
		
		List<User> result = new ArrayList<>();

		for(int i = 0; i < noOfUsersNeeded; i++){
			UserEntity currUserEntity = session.get(UserEntity.class, resultToUserIdsList.get(i));
			User currUser = new User(currUserEntity, (Long) resultCountConnections.get(i));
			result.add(currUser);
		}
		
		return result;
	}
	
	private Long getConnectionsOfUser(String userEmail){
		Session session = sessionFactory.getCurrentSession();
		
		String sqlToUserId = "SELECT toUserId FROM UserConnectionsEntity GROUP BY toUserId ORDER BY count(userConnectionId) desc";
		String sqlCountConnections = "SELECT count(userConnectionId) FROM UserConnectionsEntity GROUP BY toUserId ORDER BY count(userConnectionId) desc";
		Query queryToUserId = session.createQuery(sqlToUserId);
		Query queryCountConnections = session.createQuery(sqlCountConnections);
		List<String> resultToUserIdsList = queryToUserId.list();
		List resultCountConnections = queryCountConnections.list();
		
		Long result = (long) 0;

		for(int i = 0; i < resultToUserIdsList.size(); i++){
			if(resultToUserIdsList.get(i).equals(userEmail)){
				UserEntity currUserEntity = session.get(UserEntity.class, resultToUserIdsList.get(i));
				result = (Long) resultCountConnections.get(i);
				break;
			}
		}
		
		return result;
	}

	private List<String> getUserNames(){
		Session session = sessionFactory.getCurrentSession();
		
		String sqlToUserId = "SELECT toUserId FROM UserConnectionsEntity GROUP BY toUserId ORDER BY count(userConnectionId) desc";
		String sqlCountConnections = "SELECT count(userConnectionId) FROM UserConnectionsEntity GROUP BY toUserId ORDER BY count(userConnectionId) desc";
		
		String sqlPlacesUserId = "SELECT userEmail FROM UserReviewEntity GROUP BY userEmail ORDER BY count(reviewId) desc";
		String sqlPlacesVisited = "SELECT count(reviewId) FROM UserReviewEntity GROUP BY userEmail ORDER BY count(reviewId) desc";
		
		Query queryToUserId = session.createQuery(sqlToUserId);
		Query queryCountConnections = session.createQuery(sqlCountConnections);

		Query queryPlacesUserId = session.createQuery(sqlPlacesUserId);
		Query queryPlacesVisited = session.createQuery(sqlPlacesVisited);
		
		List<String> resultToUserIdsList = queryToUserId.list();
		List resultCountConnections = queryCountConnections.list();
		
		List<String> resultPlacesUserId = queryPlacesUserId.list();
		List resultPlacesVisited = queryPlacesVisited.list();
		
		List<String> result = new ArrayList<>();

		
		String temp;
		int j;
		Boolean userGaveReviews;
		for(int i = 0; i < resultToUserIdsList.size(); i++){
			UserEntity currUserEntity = session.get(UserEntity.class, resultToUserIdsList.get(i));
			userGaveReviews = false;
			for(j=0; j < resultPlacesUserId.size(); j++){
				if(resultToUserIdsList.get(i).equals(resultPlacesUserId.get(j))){
					userGaveReviews = true;
					break;
				}
			}
			
			if(userGaveReviews){
				temp = currUserEntity.getName() + ":" + resultCountConnections.get(i) + ":" + resultPlacesVisited.get(j) + ":" + currUserEntity.getEmail();
			}
			else{
				temp = currUserEntity.getName() + ":" + resultCountConnections.get(i) + ":0:" + currUserEntity.getEmail();
			}
			
			result.add(temp);
		}
		
		return result;
	}
	
	private List<User> getMostTravellingUsers(Integer noOfUsersNeeded){
		Session session = sessionFactory.getCurrentSession();
		
		String sqlPlacesUserId = "SELECT userEmail FROM UserReviewEntity GROUP BY userEmail ORDER BY count(reviewId) desc";
		String sqlPlacesVisited = "SELECT count(reviewId) FROM UserReviewEntity GROUP BY userEmail ORDER BY count(reviewId) desc";

		Query queryPlacesUserId = session.createQuery(sqlPlacesUserId);
		Query queryPlacesVisited = session.createQuery(sqlPlacesVisited);
		
		List<String> resultPlacesUserId = queryPlacesUserId.list();
		List resultPlacesVisited = queryPlacesVisited.list();
		
		List<User> result = new ArrayList<>();

		for(int i = 0; i < noOfUsersNeeded; i++){
			UserEntity currUserEntity = session.get(UserEntity.class, resultPlacesUserId.get(i));
			User currUser = new User(currUserEntity, (Long) resultPlacesVisited.get(i), 1);
			result.add(currUser);
		}
		
		return result;
	}
	
	private Long getPlacesTravelledByUser(String userEmail){
		Session session = sessionFactory.getCurrentSession();
		
		String sqlPlacesUserId = "SELECT userEmail FROM UserReviewEntity GROUP BY userEmail ORDER BY count(reviewId) desc";
		String sqlPlacesVisited = "SELECT count(reviewId) FROM UserReviewEntity GROUP BY userEmail ORDER BY count(reviewId) desc";

		Query queryPlacesUserId = session.createQuery(sqlPlacesUserId);
		Query queryPlacesVisited = session.createQuery(sqlPlacesVisited);
		
		List<String> resultPlacesUserId = queryPlacesUserId.list();
		List resultPlacesVisited = queryPlacesVisited.list();
		
		Long result = (long) 0;

		for(int i = 0; i < resultPlacesUserId.size(); i++){
			if(resultPlacesUserId.get(i).equals(userEmail)){
				UserEntity currUserEntity = session.get(UserEntity.class, resultPlacesUserId.get(i));
				result = (Long) resultPlacesVisited.get(i);
				break;
			}
		}
		
		return result;
	}
	
}
