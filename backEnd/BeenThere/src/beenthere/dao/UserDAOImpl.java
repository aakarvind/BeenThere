package beenthere.dao;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import beenthere.entity.CityEntity;
import beenthere.entity.ImageEntity;
import beenthere.entity.MessagesEntity;
import beenthere.entity.PlaceEntity;
import beenthere.entity.QueriesEntity;
import beenthere.entity.SiteFeedbackEntity;
import beenthere.entity.UserEntity;
import beenthere.entity.UserReviewEntity;
import beenthere.model.AdminDashBoardData;
import beenthere.model.City;
import beenthere.model.HelpdeskQuery;
import beenthere.model.Image;
import beenthere.model.LoginCredentials;
import beenthere.model.Messgaes;
import beenthere.model.Place;
import beenthere.model.SiteFeedback;
import beenthere.model.User;
import beenthere.model.UserHomeData;
import beenthere.model.UserReview;
import beenthere.model.UserSearchResult;

@Repository("userDao")
public class UserDAOImpl implements UserDAO 
{
	/*
	 * 0. annotaions and sessionFactory
	 * -> @Repository("adminDao")
	 * 
	 * -> @Autowired
	 *    SessionFactory sessionFactory;
	 * 
	 * methods:
	 * 	1. get current session
	 * 	Session session = sessionFactory.getCurrentSession();
	 *  
	 *  2. create the entity for operations
	 *  
	 *  3. perform the required operations to get required obj( in EntityType)
	 *  
	 *  4. check for null and convert to modelObj
	 *  
	 *  5. return the modelObj
	 */
	public static Integer msgId=002;
	@Autowired
	SessionFactory sessionFactory;
	
	@Override
	public UserHomeData userHomePageData() 
	{
		UserHomeData data = new UserHomeData();
		
		return data;
	}
	
	@Override
	public User registerUser(User user) {
		Session session = sessionFactory.getCurrentSession();
		
		UserEntity userEntity = session.get(UserEntity.class, user.getEmail());
		
		if(	userEntity == null) 
		{
			userEntity = new UserEntity(user);
			session.save(userEntity);
		}
		else 
		{
//			return new User();
			return null;
		}
//		System.out.println("user - name:"+user.getName()+"  email:"+user.getEmail()+"   ph:"+user.getContactNumber());
		return user;
	}

	@Override
	public User loginUser(LoginCredentials credentials) {
		Session session = sessionFactory.getCurrentSession();
		
		UserEntity userEntity = session.get(UserEntity.class, credentials.getLoginId());
		
		if(	userEntity !=null ) 
		{
			if( credentials.getPassword().equals(userEntity.getPassword()) )
			{
				User user = new User(userEntity);
				return user;
			}
//			else{
//				adminEntity
//			}
		}
		
		return null;
	}
	
	@Override
	public UserReview addUserReview(UserReview userReview)
	{
		Session session = sessionFactory.getCurrentSession();
		
		if(userReview != null)
		{
			PlaceEntity placeEntity = session.get(PlaceEntity.class, userReview.getPlaceId());
			UserReviewEntity reviewEntity = new UserReviewEntity(userReview);
			System.out.println("get worked, new entity created - " + reviewEntity.getReviewId());
			
			placeEntity.getReviewEntities().add(reviewEntity);
			
			session.save(reviewEntity);
			session.save(placeEntity);
			//pk is autogenerated after persist/save
			userReview.setReviewId(reviewEntity.getReviewId());
		}
		return userReview;
	}
	
	@Override
	public SiteFeedback addSiteFeedback(SiteFeedback siteFeedback)
	{
		Session session = sessionFactory.getCurrentSession();
		
		if(siteFeedback != null)
		{
			SiteFeedbackEntity entity = new SiteFeedbackEntity(siteFeedback);
			
			session.save(entity);
			//pk is autogenerated after persist/save
			siteFeedback.setFeedbackId(entity.getFeedbackId());
		}
		return siteFeedback;
	}
	
	@Override
	public HelpdeskQuery raiseQuery(HelpdeskQuery queryModel)
	{
		Session session = sessionFactory.getCurrentSession();
		
		if(queryModel != null)
		{
			QueriesEntity entity = new QueriesEntity(queryModel);
			entity.setQueryStatus("InProgress");
			
			session.save(entity);
			//pk is autogenerated after persist/save
			queryModel.setQueryId(entity.getQueryId());
		}
		return queryModel;
	}
	
	@Override
	public Image insertImageForReview(Image img)
	{
		Session session = sessionFactory.getCurrentSession();
		
		//System.out.println("received: " + img.getPic());
		
		ImageEntity imgEntity = new ImageEntity(img);
		
		//System.out.println(img.getReviewId());
		UserReviewEntity reviewEntity = session.get(UserReviewEntity.class, img.getReviewId());
        //System.out.println(session.save(imgEntity));
		
		img.setImageId((Integer) session.save(imgEntity));
		reviewEntity.getImageEntities().add(imgEntity);
        System.out.println(session.save(reviewEntity));
        
		return img;
	}

	@Override
	public UserSearchResult getSearchResultObjects(String searchStr)
	{
		Session session = sessionFactory.getCurrentSession();
		
		UserSearchResult result = new UserSearchResult();
		
		Query qry = session.createQuery("select city from CityEntity city");
		
		@SuppressWarnings("unchecked")
		List<CityEntity> allCityEntities = qry.list();
		
		for(CityEntity cityEntity : allCityEntities)
		{
			if(cityEntity.getName().toLowerCase().contains(searchStr.toLowerCase())){
				City city = new City(cityEntity);
				result.getMatchingCities().add(city);
				for(Place currPlace: city.getPlaces()){
					result.getMatchingPlaces().add(currPlace);
				}
				
			}
		}
		
		qry = session.createQuery("select place from PlaceEntity place");
		@SuppressWarnings("unchecked")
		List<PlaceEntity> allPlaceEntities = qry.list();
		
		for(PlaceEntity placeEntity : allPlaceEntities)
		{
			if(placeEntity.getName().toLowerCase().contains(searchStr.toLowerCase())){
				Place place = new Place(placeEntity);
				result.getMatchingPlaces().add(place);
			}
		}
        
		return result;
	}
	
	@Override
	public List<Messgaes> recive(Messgaes msg)
	{
		List<Messgaes> msgList=new ArrayList<Messgaes>();
		Session session=sessionFactory.getCurrentSession();
		CriteriaBuilder cbr=session.getCriteriaBuilder();
		CriteriaQuery<MessagesEntity> cq=cbr.createQuery(MessagesEntity.class);
		Root<MessagesEntity> root=cq.from(MessagesEntity.class);
		cq.select(root);
		cq.where(cbr.or(cbr.and(
				cbr.equal(root.get("senderEmailId"), msg.getSenderEmailId()),
				cbr.equal(root.get("reciverEmailId"), msg.getReciverEmailId())
				),cbr.and(
						cbr.equal(root.get("reciverEmailId"), msg.getSenderEmailId()),
						cbr.equal(root.get("senderEmailId"), msg.getReciverEmailId())
						)
				)
				);
		
		cq.orderBy(cbr.desc(root.get("msgId")));
		Query<MessagesEntity> query = session.createQuery(cq);
		List<MessagesEntity>lME=query.getResultList(); 
		for(MessagesEntity me:lME)
		{
			Messgaes m=new Messgaes();
			m.setData(me.getData());
			m.setMsgId(me.getMsgId());
			m.setMsgTime(me.getMsgTime());
			m.setReciverEmailId(me.getReciverEmailId());
			m.setSenderEmailId(me.getSenderEmailId());
			m.setSendersName(me.getSendersName());
			m.setReciversName(me.getReciversName());
			msgList.add(m);
		}
		return msgList;
	}
	
	
	@Override
	public Messgaes store(Messgaes msg)
	{
		Session session=sessionFactory.getCurrentSession();
		if(msg.getData()!=null)
		{
			MessagesEntity me=new MessagesEntity();
			UserDAOImpl.msgId++;
			msg.setMsgId(UserDAOImpl.msgId);
			me.setMsgId(UserDAOImpl.msgId);
			me.setData(msg.getData());
			me.setMsgTime(msg.getMsgTime());
			me.setReciverEmailId(msg.getReciverEmailId());
			me.setReciversName(msg.getReciversName());
			me.setSenderEmailId(msg.getSenderEmailId());
			me.setSendersName(msg.getSendersName());
			session.persist(me);
			return msg;
		}
		return null;
	}
	
		
	@Override
	public List<User> getAllUsers() throws Exception{
		// TODO Auto-generated method stub
		Session session = sessionFactory.getCurrentSession();
		List<User> allUsers = null;
		
			
			Query qry = session.createQuery("select users from UsersEntity users");
			
			@SuppressWarnings("unchecked")
			List<UserEntity> allUsersEntities = qry.list();
			
			allUsers = new ArrayList<User>();
			
			for (UserEntity i : allUsersEntities) {
				
				User u = new User();
				u.setEmail(i.getEmail());
				u.setName(i.getName());
				allUsers.add(u);
			}
			
			return allUsers;
	}
	
	
	
	
	
	
	
	
	
}
